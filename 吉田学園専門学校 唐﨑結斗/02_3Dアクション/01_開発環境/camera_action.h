//=============================================================================
//
// カメラマネージャークラス(camera_action.h)
// Author : 唐﨑結斗
// 概要 : カメラマネージャーの派生を行う
//
//=============================================================================
#ifndef _CAMERA_ACTION_H_		// このマクロ定義がされてなかったら
#define _CAMERA_ACTION_H_		// 二重インクルード防止のマクロ定義

//*****************************************************************************
// インクルード
//*****************************************************************************
#include "manager.h"
#include <vector>

//*****************************************************************************
// 前方宣言
//*****************************************************************************
class CObject;
class CModelObj;
class CCamera;

//=============================================================================
// マネージャークラス
// Author : 唐﨑結斗
// 概要 : マネージャー生成を行うクラス
//=============================================================================
class CCameraAction : public CManager
{
	//--------------------------------------------------------------------
	// 定数定義
	//--------------------------------------------------------------------
	static const unsigned int nACTION_BLEND_FRAM;

	//***************************************************************
	// キー設定構造体を定義
	//***************************************************************
	typedef struct
	{
		D3DXVECTOR3			pos;			// 現在位置
		D3DXVECTOR3			posV;			// 視点
		D3DXVECTOR3			posR;			// 注視点
		D3DXVECTOR3			rot;			// 現在の向き
		int					nFrame;			// フレーム数
	}KeySet;

	//***************************************************************
	// モーション設定構造体を定義
	//***************************************************************
	typedef struct
	{
		int						nNumKey;				// キー数
		int						nCntKeySet;				// キーセットカウント
		int						nCntFrame;				// フレームカウント
		bool					bLoop;					// ループ使用状況
		bool					bParent;				// 親がいるか否か
		std::vector<KeySet>		pKeySet;				// キー設定情報
	}Action;

public:
	//--------------------------------------------------------------------
	// 静的メンバ関数
	//--------------------------------------------------------------------
	static CCameraAction *Create();							// インスタンスの生成

	//--------------------------------------------------------------------
	// コンストラクタとデストラクタ
	//--------------------------------------------------------------------
	CCameraAction();
	~CCameraAction() override;

	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	HRESULT Init() override;											// 初期化
	void Uninit() override;												// 終了
	void Update() override;												// 更新
	void Draw() override;												// 描画
	void LoadAction(char *pFileName);									// マップの読み込み
	void SetAction(const int nCntMotionSet);
	void SetAction(const int nCntMotionSet, const int nNumKeySet);
	void SetCamera(CCamera *pCamera) { m_pCamera = pCamera; }
	void SetCamera() { m_pCamera = nullptr; }

private:
	//--------------------------------------------------------------------
	// メンバ関数
	//--------------------------------------------------------------------
	void PlayAction();
	void ActionBlend();

	//--------------------------------------------------------------------
	// メンバ変数
	//--------------------------------------------------------------------
	CModelObj *m_pPivot;
	CCamera *m_pCamera;
	std::vector<Action> m_action;
	D3DXVECTOR3 m_posDest;
	D3DXVECTOR3 m_posVDest;
	D3DXVECTOR3 m_posRDest;
	D3DXVECTOR3 m_rotDest;
	int m_nMaxAction;
	int m_nNumAction;
	bool m_bAction;
	bool m_bActionBlend;
};

#endif
