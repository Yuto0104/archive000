//=============================================================================
//
// モデルオブジェクトクラス(model_obj.cpp)
// Author : 唐﨑結斗
// 概要 : モデルオブジェクト生成を行う
//
//=============================================================================

//*****************************************************************************
// インクルード
//*****************************************************************************
#include <assert.h>
#include <stdio.h>

#include "score_item.h"
#include "application.h"
#include "renderer.h"
#include "model3D.h"
#include "collision_rectangle3D.h"
#include "score.h"
#include "score_item.h"
#include "game.h"

//=============================================================================
// インスタンス生成
// Author : 唐﨑結斗
// 概要 : インスタンスを生成する
//=============================================================================
CScoreItem * CScoreItem::Create()
{
	// オブジェクトインスタンス
	CScoreItem *pScoreItem = nullptr;

	// メモリの解放
	pScoreItem = new CScoreItem;

	// メモリの確保ができなかった
	assert(pScoreItem != nullptr);

	// 数値の初期化
	pScoreItem->Init();

	// インスタンスを返す
	return pScoreItem;
}

//=============================================================================
// コンストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス生成時に行う処理
//=============================================================================
CScoreItem::CScoreItem() : m_nScore(0),			// スコア
m_nCntReCreate(0),								// 再出現までのカウント
m_bUse(true)									// 使用状況
{

}

//=============================================================================
// デストラクタ
// Author : 唐﨑結斗
// 概要 : インスタンス終了時に行う処理
//=============================================================================
CScoreItem::~CScoreItem()
{

}

//=============================================================================
// 初期化
// Author : 唐﨑結斗
// 概要 : 頂点バッファを生成し、メンバ変数の初期値を設定
//=============================================================================
HRESULT CScoreItem::Init()
{
	// モデルオブジェクトの初期化
	CModelObj::Init();

	// オブジェクトのタイプ設定
	SetObjType(OBJETYPE_SCOREITEM);

	return E_NOTIMPL;
}

//=============================================================================
// 終了
// Author : 唐﨑結斗
// 概要 : テクスチャのポインタと頂点バッファの解放
//=============================================================================
void CScoreItem::Uninit()
{
	// モデルオブジェクトの終了
	CModelObj::Uninit();

	// オブジェクトの解放
	Release();
}

//=============================================================================
// 更新
// Author : 唐﨑結斗
// 概要 : 更新を行う
//=============================================================================
void CScoreItem::Update()
{
	if (m_nCntReCreate > 0)
	{
		m_nCntReCreate--;

		if(m_nCntReCreate <= 0)
		{
			m_nCntReCreate = 0;
			m_bUse = true;
			CModel3D *pModel = GetModel();
			pModel->SetColor(false);
		}
	}

	// モデルオブジェクトの更新
	CModelObj::Update();
}

//=============================================================================
// 描画
// Author : 唐﨑結斗
// 概要 : 描画を行う
//=============================================================================
void CScoreItem::Draw()
{
	// モデルオブジェクトの描画
	CModelObj::Draw();
}

//=============================================================================
// 取得処理
// Author : 唐﨑結斗
// 概要 : 非表示状態にし、スコアを返す
//=============================================================================
int CScoreItem::Acquisition(const int nCntReCreate)
{
	m_nCntReCreate = nCntReCreate;
	m_bUse = false;
	CModel3D *pModel = GetModel();
	pModel->SetColor(D3DXCOLOR(1.0f, 1.0f, 1.0f, 0.3f));
	return m_nScore;
}

